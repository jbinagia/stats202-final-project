if (dim(sub_df)[1] > 1){ # take simple average in this case
naive_df[naive_df$PatientID == id,"SecondToLastScore"] = mean(sub_df$PANSS_Total)
}else{
naive_df[naive_df$PatientID == id,"SecondToLastScore"] = sub_df$PANSS_Total
}
}
}
# average final two scores
naive_df$FinalScore = as.numeric(naive_df$FinalScore)
naive_df$PANSS_Total = as.numeric(naive_df$FinalScore)
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"SecondToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"PANSS_Total"] = naive_df[naive_df$PatientID == id,"FinalScore"]
}else{
naive_df[naive_df$PatientID == id,"PANSS_Total"] = mean(c(as.integer(naive_df[naive_df$PatientID == id,"FinalScore"]),as.integer(naive_df[naive_df$PatientID == id,"SecondToLastScore"])))
}
}
# create submission script
write.csv(naive_df[,c("PatientID","PANSS_Total")],'less-naive-forecast.csv',row.names=FALSE)
library(tidyverse)
library(fpp2)
# create training and validation of the Google stock data
goog.train <- window(goog, end = 900)
goog.test <- window(goog, start = 901)
# create training and validation of the AirPassengers data
qcement.train <- window(qcement, end = c(2012, 4))
qcement.test <- window(qcement, start = c(2013, 1))
ses.goog <- ses(goog.train, alpha = .2, h = 100)
autoplot(ses.goog)
summary(goog.train)
goog.train
0.8*0.2*.2
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear global environment
library(h2o)          # a java-based platform
library(plyr)
library(ggplot2)
library(ggsci)
rm(list = ls()) # clear global environment
A_df=read.csv("Data/Study_A.csv")
B_df=read.csv("Data/Study_B.csv")
C_df=read.csv("Data/Study_C.csv")
D_df=read.csv("Data/Study_D.csv")
E_df=read.csv("Data/Study_E.csv")
summary(E_df)
length(unique(E_df$PatientID))
# # check that there are in fact duplicates
# dfList = list(A_df,B_df,C_df,D_df,E_df)
# for (df in dfList){
#   print(dim(df))
#   print(dim(distinct(df)))
# }
#
# # remove duplicates
# A_df = distinct(A_df)
# B_df = distinct(B_df)
# C_df = distinct(C_df)
# D_df = distinct(D_df)
# E_df = distinct(E_df)
#
# # check disregarding assessment id
# A_df = A_df[ , -which(names(A_df) %in% c("AssessmentiD"))]
# B_df = B_df[ , -which(names(B_df) %in% c("AssessmentiD"))]
# C_df = C_df[ , -which(names(C_df) %in% c("AssessmentiD"))]
# D_df = D_df[ , -which(names(D_df) %in% c("AssessmentiD"))]
# E_df = E_df[ , -which(names(E_df) %in% c("AssessmentiD"))]
#
# for (df in dfList){
#   print(dim(df))
#   print(dim(distinct(df)))
# }
#
# # remove duplicates
# A_df = distinct(A_df)
# B_df = distinct(B_df)
# C_df = distinct(C_df)
# D_df = distinct(D_df)
# E_df = distinct(E_df)
sample_submission_df = read.csv("Data/sample_submission_PANSS.csv")
prediction.patients = sample_submission_df$PatientID # the PatientID #s we should use for Kaggle submission
length(prediction.patients)         # 379 values
length(unique(prediction.patients)) # 379 distinct values
#n_distinct(prediction.patients)   # gives same result
# number.visits = count(E_df, vars = "PatientID")
#
# # Basic barplot
# p<-ggplot(data=number.visits, aes(x=PatientID, y=freq)) +
#   geom_bar(stat="identity") # meaning of stat option: "If you want the heights of the bars to represent values in the data, use stat="identity" and map a value to the y aesthetic."
# p
A_df = subset(A_df, select = c(PatientID, Country, TxGroup, Study, VisitDay,PANSS_Total))
B_df = subset(B_df, select = c(PatientID, Country, TxGroup, Study, VisitDay,PANSS_Total))
C_df = subset(C_df, select = c(PatientID, Country, TxGroup, Study, VisitDay,PANSS_Total))
D_df = subset(D_df, select = c(PatientID, Country, TxGroup, Study, VisitDay,PANSS_Total))
E_df = subset(E_df, select = c(PatientID, Country, TxGroup, Study, VisitDay,PANSS_Total))
# A_df = subset(A_df, select = c(PatientID, Country, VisitDay, Study,PANSS_Total))
# B_df = subset(B_df, select = c(PatientID, Country, VisitDay, Study,PANSS_Total))
# C_df = subset(C_df, select = c(PatientID, Country, VisitDay, Study,PANSS_Total))
# D_df = subset(D_df, select = c(PatientID, Country, VisitDay, Study,PANSS_Total))
# E_df = subset(E_df, select = c(PatientID, Country, VisitDay, Study,PANSS_Total))
combined_df = rbind(A_df,B_df,C_df,D_df,E_df)
summary(combined_df)
for (i in 1:dim(combined_df)[1]) {
id = combined_df[i,"PatientID"]
patient_df = subset(combined_df,PatientID == id)
final.day = max(patient_df$VisitDay)
#if (final.day==0){ # several patients must have dropped out immediately
#  print(combined_df[i,])
#}
combined_df[i,"FinalDay"] = final.day
}
#select_patients_df = combined_df[VisitDay==FinalDay & (PatientID %in% prediction.patients)  , ]
select_patients_df = subset(combined_df, VisitDay==FinalDay & PatientID %in% prediction.patients)
dim(select_patients_df)[1]
for (id in unique(select_patients_df$PatientID)) { # for each unique id
sub_df = subset(select_patients_df, PatientID==id)
if (dim(sub_df)[1]>1){
print(sub_df)
}
}
library(dplyr)
test_df = distinct(select_patients_df)
dim(test_df)[1]
for (id in unique(test_df$PatientID)) { # for each unique id
sub_df = subset(test_df, PatientID==id)
if (dim(sub_df)[1]>1){
print(sub_df)
}
}
test_df
#pre_select_patients_df = select_patients_df # save what we have so far ... we will exclude this from the total data
library(data.table)
keys <- colnames(select_patients_df)[!grepl('PANSS_Total',colnames(test_df))] # all column names except for PANSS_Total
X <- as.data.table(test_df)
test_df = X[,list(mm=mean(PANSS_Total)),keys]
names(test_df)[length(names(test_df))] = "PANSS_Total"
dim(test_df)
dev_df = test_df # for calculating MSE later
test_df = subset(test_df, select = c(PatientID, Country, TxGroup, VisitDay, Study))
test_df$VisitDay = test_df$VisitDay + 7
#select_patients_df$VisitDay = scale(select_patients_df$VisitDay)
#select_patients_df$PANSS_Total = scale(select_patients_df$PANSS_Total)
# create "Naive" submission
write.csv(select_patients_df[,c("PatientID","PANSS_Total")],'naive-forecast.csv',row.names=FALSE)
hist(combined_df$PANSS_Total)
hist(E_df$PANSS_Total)
hist(select_patients_df$PANSS_Total)
selected_patients = subset(E_df, PatientID %in% prediction.patients)
remaining_study_e = subset(E_df, !(PatientID %in% prediction.patients))
p = ggplot(NULL,aes())+
geom_jitter(data=selected_patients,aes(x=VisitDay,y=PANSS_Total,col="Selected Patients"),size=0.5)+
geom_jitter(data=remaining_study_e,aes(x=VisitDay,y=PANSS_Total,col="Rest of Study E"),size=0.5)+
geom_jitter(data=select_patients_df,aes(x=VisitDay,y=PANSS_Total,col="Final Day"),size=0.5)+
scale_color_manual(values=rev(pal_aaas("default")(3)))+
theme_minimal()+
theme(legend.title=element_blank(),plot.title=element_text(hjust=0.5,size=10,family="Lato"),plot.subtitle=element_text(hjust=0.5,size=8,family="Lato"),text=element_text(size=10,family="Lato"))
print(p)
naive_df = subset(dev_df, select = c("PatientID","VisitDay","PANSS_Total")) # start with dev set
names(naive_df)[2] = "LastVisitDay" # rename column
names(naive_df)[3] = "FinalScore" # rename column
# find second to last visit day
for (id in naive_df$PatientID) { # for each unique id
sub_df = subset(E_df, PatientID==id)
x = sub_df$VisitDay
n <- length(x)
if (n==1) {
naive_df[naive_df$PatientID == id,"SecondToLastDay"] = NA
}else{
naive_df[naive_df$PatientID == id,"SecondToLastDay"] = sort(x,partial=n-1)[n-1]
}
}
# find second to last score
naive_df$SecondToLastScore = as.numeric(naive_df$FinalScore)
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"SecondToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"SecondToLastScore"] = NA
}else{
sub_df = subset(E_df, PatientID==id & VisitDay==day)
if (dim(sub_df)[1] > 1){ # take simple average in this case
naive_df[naive_df$PatientID == id,"SecondToLastScore"] = mean(sub_df$PANSS_Total)
}else{
naive_df[naive_df$PatientID == id,"SecondToLastScore"] = sub_df$PANSS_Total
}
}
}
# average final two scores
naive_df$FinalScore = as.numeric(naive_df$FinalScore)
naive_df$PANSS_Total = as.numeric(naive_df$FinalScore)
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"SecondToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"PANSS_Total"] = naive_df[naive_df$PatientID == id,"FinalScore"]
}else{
naive_df[naive_df$PatientID == id,"PANSS_Total"] = mean(c(as.integer(naive_df[naive_df$PatientID == id,"FinalScore"]),as.integer(naive_df[naive_df$PatientID == id,"SecondToLastScore"])))
}
}
# create submission script
write.csv(naive_df[,c("PatientID","PANSS_Total")],'less-naive-forecast.csv',row.names=FALSE)
# find third to last visit day
for (id in naive_df$PatientID) { # for each unique id
sub_df = subset(E_df, PatientID==id)
x = sub_df$VisitDay
n <- length(x)
if (n==1) {
naive_df[naive_df$PatientID == id,"ThirdToLastDay"] = NA
}else{
naive_df[naive_df$PatientID == id,"ThirdToLastDay"] = sort(x,partial=n-2)[n-2]
}
}
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear global environment
library(h2o)          # a java-based platform
library(plyr)
library(ggplot2)
library(ggsci)
rm(list = ls()) # clear global environment
A_df=read.csv("Data/Study_A.csv")
B_df=read.csv("Data/Study_B.csv")
C_df=read.csv("Data/Study_C.csv")
D_df=read.csv("Data/Study_D.csv")
E_df=read.csv("Data/Study_E.csv")
summary(E_df)
length(unique(E_df$PatientID))
# # check that there are in fact duplicates
# dfList = list(A_df,B_df,C_df,D_df,E_df)
# for (df in dfList){
#   print(dim(df))
#   print(dim(distinct(df)))
# }
#
# # remove duplicates
# A_df = distinct(A_df)
# B_df = distinct(B_df)
# C_df = distinct(C_df)
# D_df = distinct(D_df)
# E_df = distinct(E_df)
#
# # check disregarding assessment id
# A_df = A_df[ , -which(names(A_df) %in% c("AssessmentiD"))]
# B_df = B_df[ , -which(names(B_df) %in% c("AssessmentiD"))]
# C_df = C_df[ , -which(names(C_df) %in% c("AssessmentiD"))]
# D_df = D_df[ , -which(names(D_df) %in% c("AssessmentiD"))]
# E_df = E_df[ , -which(names(E_df) %in% c("AssessmentiD"))]
#
# for (df in dfList){
#   print(dim(df))
#   print(dim(distinct(df)))
# }
#
# # remove duplicates
# A_df = distinct(A_df)
# B_df = distinct(B_df)
# C_df = distinct(C_df)
# D_df = distinct(D_df)
# E_df = distinct(E_df)
sample_submission_df = read.csv("Data/sample_submission_PANSS.csv")
prediction.patients = sample_submission_df$PatientID # the PatientID #s we should use for Kaggle submission
length(prediction.patients)         # 379 values
length(unique(prediction.patients)) # 379 distinct values
#n_distinct(prediction.patients)   # gives same result
# number.visits = count(E_df, vars = "PatientID")
#
# # Basic barplot
# p<-ggplot(data=number.visits, aes(x=PatientID, y=freq)) +
#   geom_bar(stat="identity") # meaning of stat option: "If you want the heights of the bars to represent values in the data, use stat="identity" and map a value to the y aesthetic."
# p
A_df = subset(A_df, select = c(PatientID, Country, TxGroup, Study, VisitDay,PANSS_Total))
B_df = subset(B_df, select = c(PatientID, Country, TxGroup, Study, VisitDay,PANSS_Total))
C_df = subset(C_df, select = c(PatientID, Country, TxGroup, Study, VisitDay,PANSS_Total))
D_df = subset(D_df, select = c(PatientID, Country, TxGroup, Study, VisitDay,PANSS_Total))
E_df = subset(E_df, select = c(PatientID, Country, TxGroup, Study, VisitDay,PANSS_Total))
# A_df = subset(A_df, select = c(PatientID, Country, VisitDay, Study,PANSS_Total))
# B_df = subset(B_df, select = c(PatientID, Country, VisitDay, Study,PANSS_Total))
# C_df = subset(C_df, select = c(PatientID, Country, VisitDay, Study,PANSS_Total))
# D_df = subset(D_df, select = c(PatientID, Country, VisitDay, Study,PANSS_Total))
# E_df = subset(E_df, select = c(PatientID, Country, VisitDay, Study,PANSS_Total))
combined_df = rbind(A_df,B_df,C_df,D_df,E_df)
summary(combined_df)
for (i in 1:dim(combined_df)[1]) {
id = combined_df[i,"PatientID"]
patient_df = subset(combined_df,PatientID == id)
final.day = max(patient_df$VisitDay)
#if (final.day==0){ # several patients must have dropped out immediately
#  print(combined_df[i,])
#}
combined_df[i,"FinalDay"] = final.day
}
#select_patients_df = combined_df[VisitDay==FinalDay & (PatientID %in% prediction.patients)  , ]
select_patients_df = subset(combined_df, VisitDay==FinalDay & PatientID %in% prediction.patients)
dim(select_patients_df)[1]
for (id in unique(select_patients_df$PatientID)) { # for each unique id
sub_df = subset(select_patients_df, PatientID==id)
if (dim(sub_df)[1]>1){
print(sub_df)
}
}
library(dplyr)
test_df = distinct(select_patients_df)
dim(test_df)[1]
for (id in unique(test_df$PatientID)) { # for each unique id
sub_df = subset(test_df, PatientID==id)
if (dim(sub_df)[1]>1){
print(sub_df)
}
}
test_df
#pre_select_patients_df = select_patients_df # save what we have so far ... we will exclude this from the total data
library(data.table)
keys <- colnames(select_patients_df)[!grepl('PANSS_Total',colnames(test_df))] # all column names except for PANSS_Total
X <- as.data.table(test_df)
test_df = X[,list(mm=mean(PANSS_Total)),keys]
names(test_df)[length(names(test_df))] = "PANSS_Total"
dim(test_df)
dev_df = test_df # for calculating MSE later
test_df = subset(test_df, select = c(PatientID, Country, TxGroup, VisitDay, Study))
test_df$VisitDay = test_df$VisitDay + 7
#select_patients_df$VisitDay = scale(select_patients_df$VisitDay)
#select_patients_df$PANSS_Total = scale(select_patients_df$PANSS_Total)
# create "Naive" submission
write.csv(select_patients_df[,c("PatientID","PANSS_Total")],'naive-forecast.csv',row.names=FALSE)
hist(combined_df$PANSS_Total)
hist(E_df$PANSS_Total)
hist(select_patients_df$PANSS_Total)
selected_patients = subset(E_df, PatientID %in% prediction.patients)
remaining_study_e = subset(E_df, !(PatientID %in% prediction.patients))
p = ggplot(NULL,aes())+
geom_jitter(data=selected_patients,aes(x=VisitDay,y=PANSS_Total,col="Selected Patients"),size=0.5)+
geom_jitter(data=remaining_study_e,aes(x=VisitDay,y=PANSS_Total,col="Rest of Study E"),size=0.5)+
geom_jitter(data=select_patients_df,aes(x=VisitDay,y=PANSS_Total,col="Final Day"),size=0.5)+
scale_color_manual(values=rev(pal_aaas("default")(3)))+
theme_minimal()+
theme(legend.title=element_blank(),plot.title=element_text(hjust=0.5,size=10,family="Lato"),plot.subtitle=element_text(hjust=0.5,size=8,family="Lato"),text=element_text(size=10,family="Lato"))
print(p)
naive_df = subset(dev_df, select = c("PatientID","VisitDay","PANSS_Total")) # start with dev set
names(naive_df)[2] = "LastVisitDay" # rename column
names(naive_df)[3] = "FinalScore" # rename column
# find second to last visit day
for (id in naive_df$PatientID) { # for each unique id
sub_df = subset(E_df, PatientID==id)
x = sub_df$VisitDay
n <- length(x)
if (n==1) {
naive_df[naive_df$PatientID == id,"SecondToLastDay"] = NA
}else{
naive_df[naive_df$PatientID == id,"SecondToLastDay"] = sort(x,partial=n-1)[n-1]
}
}
# find second to last score
naive_df$SecondToLastScore = as.numeric(naive_df$FinalScore)
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"SecondToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"SecondToLastScore"] = NA
}else{
sub_df = subset(E_df, PatientID==id & VisitDay==day)
if (dim(sub_df)[1] > 1){ # take simple average in this case
naive_df[naive_df$PatientID == id,"SecondToLastScore"] = mean(sub_df$PANSS_Total)
}else{
naive_df[naive_df$PatientID == id,"SecondToLastScore"] = sub_df$PANSS_Total
}
}
}
# average final two scores
naive_df$FinalScore = as.numeric(naive_df$FinalScore)
naive_df$PANSS_Total = as.numeric(naive_df$FinalScore)
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"SecondToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"PANSS_Total"] = naive_df[naive_df$PatientID == id,"FinalScore"]
}else{
naive_df[naive_df$PatientID == id,"PANSS_Total"] = mean(c(as.integer(naive_df[naive_df$PatientID == id,"FinalScore"]),as.integer(naive_df[naive_df$PatientID == id,"SecondToLastScore"])))
}
}
# create submission script
write.csv(naive_df[,c("PatientID","PANSS_Total")],'less-naive-forecast.csv',row.names=FALSE)
# find third to last visit day
for (id in naive_df$PatientID) { # for each unique id
sub_df = subset(E_df, PatientID==id)
x = sub_df$VisitDay
n <- length(x)
if (n<3) {
naive_df[naive_df$PatientID == id,"ThirdToLastDay"] = NA
}else{
naive_df[naive_df$PatientID == id,"ThirdToLastDay"] = sort(x,partial=n-2)[n-2]
}
}
# find third to last score
naive_df$ThirdToLastScore = as.numeric(naive_df$FinalScore)
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"ThirdToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"ThirdToLastScore"] = NA
}else{
sub_df = subset(E_df, PatientID==id & VisitDay==day)
if (dim(sub_df)[1] > 1){ # take simple average in this case
naive_df[naive_df$PatientID == id,"ThirdToLastScore"] = mean(sub_df$PANSS_Total)
}else{
naive_df[naive_df$PatientID == id,"ThirdToLastScore"] = sub_df$PANSS_Total
}
}
}
naive_df$PANSS_Total = 0*naive_df$PANSS_Total
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"SecondToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"PANSS_Total"] = naive_df[naive_df$PatientID == id,"FinalScore"]
}else{
naive_df[naive_df$PatientID == id,"PANSS_Total"] = mean(c(as.integer(naive_df[naive_df$PatientID == id,"FinalScore"]),as.integer(naive_df[naive_df$PatientID == id,"SecondToLastScore"])))
day2 = as.integer(naive_df[naive_df$PatientID == id,"ThirdToLastDay"])
if (is.na(day2)){
alpha = 0.9
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"PANSS_Total"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]
}else{
alpha = 0.8
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"PANSS_Total"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]  + alpha*(1-alpha)^2*naive_df[naive_df$PatientID == id,"ThirdToLastScore"]
}
}
}
# create submission script
write.csv(naive_df[,c("PatientID","PANSS_Total")],'less-naive-forecast.csv',row.names=FALSE)
naive_df$PANSS_Total = 0*naive_df$PANSS_Total
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"SecondToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"PANSS_Total"] = naive_df[naive_df$PatientID == id,"FinalScore"]
}else{
naive_df[naive_df$PatientID == id,"PANSS_Total"] = mean(c(as.integer(naive_df[naive_df$PatientID == id,"FinalScore"]),as.integer(naive_df[naive_df$PatientID == id,"SecondToLastScore"])))
day2 = as.integer(naive_df[naive_df$PatientID == id,"ThirdToLastDay"])
if (is.na(day2)){
alpha = 1
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"PANSS_Total"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]
}else{
alpha = 1
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"PANSS_Total"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]  + alpha*(1-alpha)^2*naive_df[naive_df$PatientID == id,"ThirdToLastScore"]
}
}
}
# create submission script
write.csv(naive_df[,c("PatientID","PANSS_Total")],'less-naive-forecast.csv',row.names=FALSE)
naive_df$PANSS_Total = 0*naive_df$PANSS_Total
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"SecondToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"PANSS_Total"] = naive_df[naive_df$PatientID == id,"FinalScore"]
}else{
day2 = as.integer(naive_df[naive_df$PatientID == id,"ThirdToLastDay"])
if (is.na(day2)){
alpha = 1
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"PANSS_Total"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]
}else{
alpha = 1
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"PANSS_Total"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]  + alpha*(1-alpha)^2*naive_df[naive_df$PatientID == id,"ThirdToLastScore"]
}
}
}
# create submission script
write.csv(naive_df[,c("PatientID","PANSS_Total")],'less-naive-forecast.csv',row.names=FALSE)
naive_df$PANSS_Total = 0*naive_df$PANSS_Total
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"SecondToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"PANSS_Total"] = naive_df[naive_df$PatientID == id,"FinalScore"]
}else{
day2 = as.integer(naive_df[naive_df$PatientID == id,"ThirdToLastDay"])
if (is.na(day2)){
alpha = 1
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"PANSS_Total"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]
}else{
alpha = 1
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"PANSS_Total"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]  + alpha*(1-alpha)^2*naive_df[naive_df$PatientID == id,"ThirdToLastScore"]
}
}
}
# create submission script
write.csv(naive_df[,c("PatientID","PANSS_Total")],'less-naive-forecast.csv',row.names=FALSE)
naive_df$PANSS_Total = 0*naive_df$PANSS_Total
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"SecondToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"PANSS_Total"] = naive_df[naive_df$PatientID == id,"FinalScore"]
}else{
day2 = as.integer(naive_df[naive_df$PatientID == id,"ThirdToLastDay"])
if (is.na(day2)){
alpha = 1
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"FinalScore"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]
}else{
alpha = 1
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"FinalScore"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]  + alpha*(1-alpha)^2*naive_df[naive_df$PatientID == id,"ThirdToLastScore"]
}
}
}
# create submission script
write.csv(naive_df[,c("PatientID","PANSS_Total")],'less-naive-forecast.csv',row.names=FALSE)
naive_df$PANSS_Total = 0*naive_df$PANSS_Total
for (id in naive_df$PatientID) { # for each unique id
day = as.integer(naive_df[naive_df$PatientID == id,"SecondToLastDay"])
if (is.na(day)){
naive_df[naive_df$PatientID == id,"PANSS_Total"] = naive_df[naive_df$PatientID == id,"FinalScore"]
}else{
day2 = as.integer(naive_df[naive_df$PatientID == id,"ThirdToLastDay"])
if (is.na(day2)){
alpha = 0.9
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"FinalScore"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]
}else{
alpha = 0.8
naive_df[naive_df$PatientID == id,"PANSS_Total"] = alpha*naive_df[naive_df$PatientID == id,"FinalScore"] + alpha*(1-alpha)*naive_df[naive_df$PatientID == id,"SecondToLastScore"]  + alpha*(1-alpha)^2*naive_df[naive_df$PatientID == id,"ThirdToLastScore"]
}
}
}
# create submission script
write.csv(naive_df[,c("PatientID","PANSS_Total")],'less-naive-forecast.csv',row.names=FALSE)
