train.svm.pred = predict(svmfit,probability=TRUE)
table(combined.dev$LeadStatus, dev.svm.pred) %>% prop.table() %>% round(3)
dev.svm.pred = predict(svmfit,newdata = combined.dev,probability=TRUE)
table(combined.dev$LeadStatus, dev.svm.pred) %>% prop.table() %>% round(3)
# accuracy rate
mean(dev.svm.pred == combined.dev$LeadStatus)
# error rate
mean(dev.svm.pred != combined.dev$LeadStatus)
# ROC curves
prediction(dev.svm.pred$posterior[,2], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
dev.svm.pred
dev.svm.pred[,2]
dev.svm.pred[2]
dim(dev.svm.pred)
length(dev.svm.pred)
head(dev.svm.pred)
dev.svm.pred(,"probabilities")
attr(dev.svm.pred, "probabilities")
# ROC curves
prediction(dev.svm.pred, combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
probabilities = attr(dev.svm.pred, "probabilities")
probabilities[,2]
# ROC curves
probabilities = attr(dev.svm.pred, "probabilities")
prediction(probabilities, combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# ROC curves
probabilities = attr(dev.svm.pred, "probabilities")
prediction(probabilities[,2], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(dev.svm.pred, combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# ROC curves
probabilities = attr(dev.svm.pred, "probabilities")
prediction(probabilities[,2], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(probabilities[,2], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(probabilities[,2], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
# ROC curves
probabilities = attr(dev.svm.pred, "probabilities")
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(probabilities[,2], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(probabilities[,2], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
# ROC curves
probabilities = attr(dev.svm.pred, "probabilities")
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(probabilities[,2], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
# ROC curves
probabilities = attr(dev.svm.pred, "probabilities")
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(probabilities[,1], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
# ROC curves
probabilities = attr(dev.svm.pred, "probabilities")
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(probabilities[,2], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
# ROC curves
probabilities = attr(dev.svm.pred, "probabilities")
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(probabilities[,1], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
test=E_df
test.svm.pred = predict(svmfit,newdata = combined.dev,probability=TRUE)
probabilities = attr(dev.svm.pred, "probabilities")
test$LeadStatus = probabilities[,2]
E_df
test=E_df
test.svm.pred = predict(svmfit,newdata = test,probability=TRUE)
test=E_df
test.svm.pred = predict(svmfit, newdata = test, probability=TRUE)
library(e1071)        # SVM methodology
set.seed(1)
svmfit <- svm(LeadStatus~., data = combined.train[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")], kernel = "linear", scale=TRUE, probability=TRUE)
summary(svmfit)
dev.svm.pred = predict(svmfit,newdata = combined.dev,probability=TRUE)
table(combined.dev$LeadStatus, dev.svm.pred) %>% prop.table() %>% round(3)
# accuracy rate
mean(dev.svm.pred == combined.dev$LeadStatus)
# error rate
mean(dev.svm.pred != combined.dev$LeadStatus)
# ROC curves
probabilities = attr(dev.svm.pred, "probabilities")
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(probabilities[,1], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
test=E_df
test.svm.pred = predict(svmfit, newdata = test, probability=TRUE)
probabilities = attr(dev.svm.pred, "probabilities")
test$LeadStatus = probabilities[,2]
probabilities[,2]
dim(probabilities[,2])
length(probabilities[,2])
dim(test)
test=E_df
test.svm.pred = predict(svmfit, newdata = test, probability=TRUE)
probabilities = attr(test.svm.pred, "probabilities")
test$LeadStatus = probabilities[,2]
test = test[,c("AssessmentiD","LeadStatus")]
# compare to logistic regression
plot(test.output.glm$LeadStatus,test$LeadStatus,xlim=c(0,0.5),ylim=c(0,0.5))
abline(0,1)
# write for kaggle prediction
write.csv(test,"Predictions/qda-prediction.csv",row.names=FALSE)
test.svm.pred
library(e1071)        # SVM methodology
set.seed(1)
svmfit <- svm(LeadStatus~., data = combined.train[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")], kernel = "linear", scale=TRUE, probability=TRUE)
summary(svmfit)
# # find optimal cost of misclassification
# tune.out <- tune(svm, LeadStatus~., data = combined.train, kernel = "linear",
#                  ranges = list(cost = c(0.01, 0.1, 1, 10)), probability=TRUE)
# # extract the best model
# (bestmod <- tune.out$best.model)
dev.svm.pred = predict(svmfit,newdata = combined.dev,probability=TRUE)
table(combined.dev$LeadStatus, dev.svm.pred) %>% prop.table() %>% round(3)
# accuracy rate
mean(dev.svm.pred == combined.dev$LeadStatus)
# error rate
mean(dev.svm.pred != combined.dev$LeadStatus)
# ROC curves
probabilities = attr(dev.svm.pred, "probabilities")
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(probabilities[,1], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
test=E_df
test.svm.pred = predict(svmfit, newdata = test, probability=TRUE)
probabilities = attr(test.svm.pred, "probabilities")
test$LeadStatus = probabilities[,2]
test = test[,c("AssessmentiD","LeadStatus")]
# compare to logistic regression
plot(test.output.glm$LeadStatus,test$LeadStatus,xlim=c(0,0.5),ylim=c(0,0.5))
abline(0,1)
# write for kaggle prediction
write.csv(test,"Predictions/svm-prediction.csv",row.names=FALSE)
library(e1071)        # SVM methodology
set.seed(1)
svmfit <- svm(LeadStatus~., data = combined.train[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")], kernel = "radial", scale=TRUE, probability=TRUE)
summary(svmfit)
# # find optimal cost of misclassification
# tune.out <- tune(svm, LeadStatus~., data = combined.train, kernel = "linear",
#                  ranges = list(cost = c(0.01, 0.1, 1, 10)), probability=TRUE)
# # extract the best model
# (bestmod <- tune.out$best.model)
dev.svm.pred = predict(svmfit,newdata = combined.dev,probability=TRUE)
table(combined.dev$LeadStatus, dev.svm.pred) %>% prop.table() %>% round(3)
# accuracy rate
mean(dev.svm.pred == combined.dev$LeadStatus)
# error rate
mean(dev.svm.pred != combined.dev$LeadStatus)
# ROC curves
probabilities = attr(dev.svm.pred, "probabilities")
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(probabilities[,1], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(probabilities[,1], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
test=E_df
test.svm.pred = predict(svmfit, newdata = test, probability=TRUE)
probabilities = attr(test.svm.pred, "probabilities")
test$LeadStatus = probabilities[,2]
test = test[,c("AssessmentiD","LeadStatus")]
# compare to logistic regression
plot(test.output.glm$LeadStatus,test$LeadStatus,xlim=c(0,0.5),ylim=c(0,0.5))
abline(0,1)
# write for kaggle prediction
write.csv(test,"Predictions/svm-prediction.csv",row.names=FALSE)
gamma = 10^(-5:-1)
gamma
cost = 10^(-3:1)
cost
# find optimal cost of misclassification
tune.out <- tune(svm, LeadStatus~., data = combined.train[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")], gamma = 10^(-5:-1), cost = 10^(-3:1), probability=TRUE)
# extract the best model
(bestmod <- tune.out$best.model)
summary(bestmod)
tune.out
summary(tune.out)
(tune.out)
tune.out$best.performance
tune.out$best.parameters
tune.out$best.model
# find optimal cost of misclassification
tune.out <- tune(svm, LeadStatus~., data = combined.train[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")], ranges = list(gamma = 10^(-5:1), cost = 10^(-3:1)), probability=TRUE)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear global environment
library(dplyr)
library(ggplot2)
A_df=read.csv("Data/Study_A.csv")
B_df=read.csv("Data/Study_B.csv")
C_df=read.csv("Data/Study_C.csv")
D_df=read.csv("Data/Study_D.csv")
E_df=read.csv("Data/Study_E.csv")
#summary(E_df)
names(E_df)
dim(E_df)[1]
sample_submission_df = read.csv("Data/sample_submission_status.csv")
prediction.ids = sample_submission_df$AssessmentID # the AssessmentID #s we should use for Kaggle submission
length(unique(prediction.ids))
length(prediction.ids)
all(E_df$AssessmentiD==prediction.ids)
A_df = subset(A_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
B_df = subset(B_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
C_df = subset(C_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
D_df = subset(D_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
names(E_df)
E_df = subset(E_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,AssessmentiD))
names(E_df)
combined_df = rbind(A_df,B_df,C_df,D_df)
summary(combined_df)
names(combined_df)
dim(combined_df)[1]
combined_df=distinct(combined_df)
dim(combined_df)[1]
combined_df <- mutate_at(combined_df, vars(Country, TxGroup,LeadStatus), as.factor)
str(combined_df) # compactly display structure of the object
E_df<-mutate_at(E_df,vars(Country, TxGroup,AssessmentiD),as.factor)
str(E_df)
combined_df$LeadStatus[combined_df$LeadStatus!="Passed"]<-"Flagged"
combined_df$LeadStatus=factor(combined_df$LeadStatus)
table(combined_df$LeadStatus)
set.seed(1)
tot=1:dim(combined_df)[1] # total number of observations
train=sample(tot,length(tot)*0.7) # put 70% of observations into training set
combined.train=combined_df[train,]
head(combined.train)
dev=tot[-train] # rest go into development set
combined.dev=combined_df[dev,]
test=E_df # study E is the test set
library(dplyr)
library(h2o)
library(caret)
library(corrplot)
Y.train="LeadStatus"
X.train=setdiff(names(combined.train),c(Y.train,"VisitDay"))
#names(X.train)
h2o.no_progress()
h2o.init()
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear global environment
library(dplyr)
library(ggplot2)
A_df=read.csv("Data/Study_A.csv")
B_df=read.csv("Data/Study_B.csv")
C_df=read.csv("Data/Study_C.csv")
D_df=read.csv("Data/Study_D.csv")
E_df=read.csv("Data/Study_E.csv")
#summary(E_df)
names(E_df)
dim(E_df)[1]
sample_submission_df = read.csv("Data/sample_submission_status.csv")
prediction.ids = sample_submission_df$AssessmentID # the AssessmentID #s we should use for Kaggle submission
length(unique(prediction.ids))
length(prediction.ids)
all(E_df$AssessmentiD==prediction.ids)
A_df = subset(A_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
B_df = subset(B_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
C_df = subset(C_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
D_df = subset(D_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
names(E_df)
E_df = subset(E_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,AssessmentiD))
names(E_df)
combined_df = rbind(A_df,B_df,C_df,D_df)
summary(combined_df)
names(combined_df)
dim(combined_df)[1]
combined_df=distinct(combined_df)
dim(combined_df)[1]
combined_df <- mutate_at(combined_df, vars(Country, TxGroup,LeadStatus), as.factor)
str(combined_df) # compactly display structure of the object
E_df<-mutate_at(E_df,vars(Country, TxGroup,AssessmentiD),as.factor)
str(E_df)
combined_df$LeadStatus[combined_df$LeadStatus!="Passed"]<-"Flagged"
combined_df$LeadStatus=factor(combined_df$LeadStatus)
table(combined_df$LeadStatus)
set.seed(1)
tot=1:dim(combined_df)[1] # total number of observations
train=sample(tot,length(tot)*0.7) # put 70% of observations into training set
combined.train=combined_df[train,]
head(combined.train)
dev=tot[-train] # rest go into development set
combined.dev=combined_df[dev,]
test=E_df # study E is the test set
library(dplyr)
library(h2o)
library(caret)
library(corrplot)
Y.train="LeadStatus"
X.train=setdiff(names(combined.train),c(Y.train,"VisitDay"))
#names(X.train)
h2o.no_progress()
h2o.init()
combined.train.h2o <- combined.train %>%
mutate_if(is.factor, factor, ordered = FALSE) %>%
as.h2o()
str(combined.train.h2o)
train.nb <- h2o.naiveBayes(
x = X.train,
y = Y.train,
training_frame = combined.train.h2o,
nfolds = 10,
laplace = 0
)
# assess results on training data
cM.nb=h2o.confusionMatrix(train.nb)
accuracy.nb=(cM.nb[1,1]+cM.nb[2,2])/(cM.nb[3,1]+cM.nb[3,2])
print(cM.nb)
print(paste("Training accuracy: =",accuracy.nb))
# ROC curve on the development data
names(combined.dev)
combined.dev.h2o=combined.dev[,-3]#get rid of VisitDay
names(combined.dev.h2o)
combined.dev.h2o=combined.dev.h2o %>%
mutate_if(is.factor,factor,ordered=FALSE) %>%
as.h2o()
performance.train=h2o.performance(train.nb,xval=TRUE)
performance.dev=h2o.performance(train.nb,newdata=combined.dev.h2o)
logloss.train = h2o.logloss(performance.train,xval=TRUE)
logloss.dev=h2o.logloss(performance.dev,xval=TRUE)
auc.train <- h2o.auc(performance.train,xval=TRUE)
auc.dev <- h2o.auc(performance.dev)
fpr.dev <- h2o.fpr(performance.dev) %>% .[['fpr']]
tpr.dev <- h2o.tpr(performance.dev) %>% .[['tpr']]
data.frame(fpr = fpr.dev, tpr = tpr.dev) %>%
ggplot(aes(fpr, tpr) ) +
geom_line() +
ggtitle( sprintf('Development Dataset AUC, LogLoss: %f, %f', auc.dev,logloss.dev) )
# predict values with predict -->
names(test)
test.h2o=test[,-3]#get rid of VisitDay
#test.h2o=test.h2o[,-4]#get rid of AssessmentiD
test.h2o=test.h2o %>%
mutate_if(is.factor,factor,ordered=FALSE)%>%
as.h2o()
str(test.h2o)
nb.predictions=h2o.predict(train.nb,test.h2o)
nb.predictions_df=as.data.frame(nb.predictions)
test$LeadStatus=nb.predictions_df$Flagged
test.output=test[,c("AssessmentiD","LeadStatus")]
write.csv(test.output,"test.nb.csv",row.names=FALSE)
library(pROC)
names(combined.train)
combined.train.glm=combined.train[,-1] # exclude country from being a predictor
attach(combined.train.glm)
names(combined.train.glm)
train.glm=glm(LeadStatus~.,data=combined.train.glm,family=binomial)
summary(train.glm)
contrasts(LeadStatus)#check dummy encoding for Up/Down
#dev test
glm.probs.flag.dev=1-predict(train.glm,combined.dev,type="response")
glm.pred=rep("Passed",dim(combined.dev)[1])#create vector of predictions of length the same as dev dataset
glm.pred[glm.probs.flag.dev>0.2]="Flagged"#change relevant values to "Flagged" based on model-predicted value.
table(glm.pred,combined.dev$LeadStatus)
roc.dev=roc(LeadStatus~glm.probs.flag.dev,data=combined.dev)
plot(roc.dev,xlim=c(0,1),ylim=c(0,1))
#kaggle test
test=E_df
glm.probs=predict(train.glm,test,type="response")#compute predictions based on fit for each observation; 1 corresponds to Passed
glm.probs.flag=1-glm.probs#probabililty of being flagged for all.
names(test)
test.output.glm=as.data.frame(test$AssessmentiD)
test.output.glm$LeadStatus=glm.probs.flag
colnames(test.output.glm)[colnames(test.output.glm)=="AssessmentiD"] <- "AssessmentID"
write.csv(test.output.glm,"test.glm.csv",row.names=FALSE)
plot(test.output.glm$LeadStatus,nb.predictions_df$Flagged,xlim=c(0,0.5),ylim=c(0,0.5))
abline(0,1)
library(MASS)       # provides LDA & QDA model functions
(lda.m1 = lda(LeadStatus~., data = combined.train[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")]))
plot(lda.m1)
dev.lda.pred = predict(lda.m1, newdata = combined.dev)
table(combined.dev$LeadStatus, dev.lda.pred$class) %>% prop.table() %>% round(3)
# accuracy rate
mean(dev.lda.pred$class == combined.dev$LeadStatus)
# error rate
mean(dev.lda.pred$class != combined.dev$LeadStatus)
# ROC curves
library(ROCR)
prediction(dev.lda.pred$posterior[,2], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(dev.lda.pred$posterior[,2], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(dev.lda.pred$posterior[,2], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
test.lda.pred = predict(lda.m1, newdata = test)
test$LeadStatus = test.lda.pred$posterior[,1]
test = test[,c("AssessmentiD","LeadStatus")]
# compare to logistic regression
plot(test.output.glm$LeadStatus,test$LeadStatus,xlim=c(0,0.5),ylim=c(0,0.5))
abline(0,1)
# write for kaggle prediction
write.csv(test,"Predictions/lda-prediction.csv",row.names=FALSE)
(qda.m1 = qda(LeadStatus~., data = combined.train[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")]))
dev.qda.pred = predict(qda.m1, newdata = combined.dev)
table(combined.dev$LeadStatus, dev.qda.pred$class) %>% prop.table() %>% round(3)
# accuracy rate
mean(dev.qda.pred$class == combined.dev$LeadStatus)
# error rate
mean(dev.qda.pred$class != combined.dev$LeadStatus)
# ROC curves
library(ROCR)
prediction(dev.qda.pred$posterior[,2], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(dev.qda.pred$posterior[,2], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(dev.qda.pred$posterior[,2], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
test=E_df
test.qda.pred = predict(qda.m1, newdata = test)
test$LeadStatus = test.qda.pred$posterior[,1]
test = test[,c("AssessmentiD","LeadStatus")]
# compare to logistic regression
plot(test.output.glm$LeadStatus,test$LeadStatus,xlim=c(0,0.5),ylim=c(0,0.5))
abline(0,1)
# write for kaggle prediction
write.csv(test,"Predictions/qda-prediction.csv",row.names=FALSE)
library(e1071)        # SVM methodology
set.seed(1)
svmfit <- svm(LeadStatus~., data = combined.train[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")], scale=TRUE, probability=TRUE)
summary(svmfit)
# find optimal cost of misclassification
tune.out <- tune(svm, LeadStatus~., data = combined.train[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")], ranges = list(gamma = 10^(-5:1), cost = 10^(-3:1)), probability=TRUE)
bestmod
bestmod
summary(tune.out)
