pred_randomForest <- predict(m1, test.all)
plot(test.output.glm$LeadStatus,pred_randomForest$predictions[,1],xlim=c(0,5),ylim=c(0,5))
abline(0,1)
# # number of trees with lowest MSE
# which.min(m1$err.rate)
#
# # MSE of this optimal random forest
# m1$err.rate[which.min(m1$err.rate)]
# prediction
pred_randomForest <- predict(m1, test.all)
plot(test.output.glm$LeadStatus,pred_randomForest$predictions[,1],xlim=c(0,.5),ylim=c(0,.5))
abline(0,1)
# start up h2o
h2o.removeAll()
h2o.init(max_mem_size = "6g")
set.seed(1)
# hypergrid
hyper_grid.h2o <- list(
ntrees      = seq(200, 500, by = 150),
mtries      = seq(15, 35, by = 10),
max_depth   = seq(20, 40, by = 5),
min_rows    = seq(1, 5, by = 2),
nbins       = seq(10, 30, by = 5),
sample_rate = c(.55, .632, .75)
)
# total number of combinations
nrow(hyper_grid)
# start up h2o
h2o.removeAll()
h2o.init(max_mem_size = "6g")
set.seed(1)
# hypergrid
hyper_grid.h2o <- list(
ntrees      = seq(200, 500, by = 150),
mtries      = seq(15, 35, by = 10),
max_depth   = seq(20, 40, by = 5),
min_rows    = seq(1, 5, by = 2),
nbins       = seq(10, 30, by = 5),
sample_rate = c(.55, .632, .75)
)
# total number of combinations
nrow(hyper_grid.h2o)
# random grid search criteria
search_criteria <- list(
strategy = "RandomDiscrete",
stopping_metric = "logloss",
stopping_tolerance = 0.005,
stopping_rounds = 10,
max_runtime_secs = 60*1
)
# build grid search
random_grid <- h2o.grid(
algorithm = "randomForest",
grid_id = "rf_grid2",
x = X.train,
y = Y.train,
training_frame = combined.train.h2o.gbm,
hyper_params = hyper_grid.h2o,
search_criteria = search_criteria
)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear global environment
library(dplyr)
library(ggplot2)
A_init_df=read.csv("Data/Study_A.csv")
B_init_df=read.csv("Data/Study_B.csv")
C_init_df=read.csv("Data/Study_C.csv")
D_init_df=read.csv("Data/Study_D.csv")
E_init_df=read.csv("Data/Study_E.csv")
#summary(E_init_df)
names(E_init_df)
dim(E_init_df)[1]
sample_submission_df = read.csv("Data/sample_submission_status.csv")
prediction.ids = sample_submission_df$AssessmentID # the AssessmentID #s we should use for Kaggle submission
length(unique(prediction.ids))
length(prediction.ids)
all(E_init_df$AssessmentiD==prediction.ids)
A_df = subset(A_init_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
B_df = subset(B_init_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
C_df = subset(C_init_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
D_df = subset(D_init_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,LeadStatus))
names(E_init_df)
E_df = subset(E_init_df, select = c(Country,TxGroup,VisitDay,PANSS_Total,AssessmentiD))
names(E_df)
combined_df = rbind(A_df,B_df,C_df,D_df)
summary(combined_df)
names(combined_df)
dim(combined_df)[1]
combined_df=distinct(combined_df)
dim(combined_df)[1]
combined_df <- mutate_at(combined_df, vars(Country, TxGroup,LeadStatus), as.factor)
str(combined_df) # compactly display structure of the object
E_df<-mutate_at(E_df,vars(Country, TxGroup,AssessmentiD),as.factor)
str(E_df)
combined_df$LeadStatus[combined_df$LeadStatus!="Passed"]<-"Flagged"
combined_df$LeadStatus=factor(combined_df$LeadStatus)
table(combined_df$LeadStatus)
set.seed(1)
tot=1:dim(combined_df)[1] # total number of observations
train=sample(tot,length(tot)*0.7) # put 70% of observations into training set
combined.train=combined_df[train,]
head(combined.train)
dev=tot[-train] # rest go into development set
combined.dev=combined_df[dev,]
test=E_df # study E is the test set
library(dplyr)
library(h2o)
library(caret)
library(corrplot)
Y.train="LeadStatus"
X.train=setdiff(names(combined.train),c(Y.train,"VisitDay"))
# h2o.no_progress()
h2o.init()
combined.train.h2o <- combined.train %>%
mutate_if(is.factor, factor, ordered = FALSE) %>%
as.h2o()
str(combined.train.h2o)
train.nb <- h2o.naiveBayes(
x = X.train,
y = Y.train,
training_frame = combined.train.h2o,
nfolds = 10,
laplace = 0
)
# assess results on training data
cM.nb=h2o.confusionMatrix(train.nb)
accuracy.nb=(cM.nb[1,1]+cM.nb[2,2])/(cM.nb[3,1]+cM.nb[3,2])
print(cM.nb)
print(paste("Training accuracy: =",accuracy.nb))
# ROC curve on the development data
names(combined.dev)
combined.dev.h2o=combined.dev[,-3]#get rid of VisitDay
names(combined.dev.h2o)
combined.dev.h2o=combined.dev.h2o %>%
mutate_if(is.factor,factor,ordered=FALSE) %>%
as.h2o()
performance.train=h2o.performance(train.nb,xval=TRUE)
performance.dev=h2o.performance(train.nb,newdata=combined.dev.h2o)
logloss.train = h2o.logloss(performance.train,xval=TRUE)
logloss.dev=h2o.logloss(performance.dev,xval=TRUE)
auc.train <- h2o.auc(performance.train,xval=TRUE)
auc.dev <- h2o.auc(performance.dev)
fpr.dev <- h2o.fpr(performance.dev) %>% .[['fpr']]
tpr.dev <- h2o.tpr(performance.dev) %>% .[['tpr']]
data.frame(fpr = fpr.dev, tpr = tpr.dev) %>%
ggplot(aes(fpr, tpr) ) +
geom_line() +
ggtitle( sprintf('Development Dataset AUC, LogLoss: %f, %f', auc.dev,logloss.dev) )
# predict values with predict -->
names(test)
test.h2o=test[,-3]#get rid of VisitDay
#test.h2o=test.h2o[,-4]#get rid of AssessmentiD
test.h2o=test.h2o %>%
mutate_if(is.factor,factor,ordered=FALSE)%>%
as.h2o()
str(test.h2o)
nb.predictions=h2o.predict(train.nb,test.h2o)
nb.predictions_df=as.data.frame(nb.predictions)
test$LeadStatus=nb.predictions_df$Flagged
test.output=test[,c("AssessmentiD","LeadStatus")]
write.csv(test.output,"test.nb.csv",row.names=FALSE)
library(pROC)
names(combined.train)
combined.train.glm = combined.train[,-1] # exclude country from being a predictor
attach(combined.train.glm)
names(combined.train.glm)
train.glm = glm(LeadStatus~.,data = combined.train.glm,family = binomial)
summary(train.glm)
contrasts(LeadStatus)#check dummy encoding for Up/Down
#dev test
glm.probs.flag.dev = 1-predict(train.glm,combined.dev,type = "response")
glm.pred = rep("Passed",dim(combined.dev)[1])#create vector of predictions of length the same as dev dataset
glm.pred[glm.probs.flag.dev>0.2] = "Flagged"#change relevant values to "Flagged" based on model-predicted value.
table(glm.pred,combined.dev$LeadStatus)
roc.dev = roc(LeadStatus~glm.probs.flag.dev,data = combined.dev)
plot(roc.dev,xlim = c(0,1),ylim = c(0,1))
#kaggle test
test = E_df
glm.probs = predict(train.glm,test,type = "response")#compute predictions based on fit for each observation; 1 corresponds to Passed
glm.probs.flag = 1-glm.probs#probabililty of being flagged for all.
names(test)
test.output.glm = as.data.frame(test$AssessmentiD)
test.output.glm$LeadStatus = glm.probs.flag
colnames(test.output.glm)[colnames(test.output.glm)=="AssessmentiD"] <- "AssessmentID"
write.csv(test.output.glm,"Predictions/test.glm.csv",row.names = FALSE)
plot(test.output.glm$LeadStatus,nb.predictions_df$Flagged,xlim = c(0,0.5),ylim = c(0,0.5))
abline(0,1)
full.glm = glm(LeadStatus~.,data = combined_df[,-1],family = binomial)
summary(full.glm)
contrasts(LeadStatus)#check dummy encoding for Up/Down
test = E_df
glm.probs = predict(full.glm,test,type = "response") #compute predictions based on fit for each observation; 1 corresponds to Passed
glm.probs.flag = 1 - glm.probs#probabililty of being flagged for all.
test.full.glm = as.data.frame(test$AssessmentiD)
test.full.glm$LeadStatus = glm.probs.flag
colnames(test.full.glm)[colnames(test.full.glm)=="AssessmentiD"] <- "AssessmentID"
write.csv(test.full.glm,"Predictions/test.glm.full.csv",row.names = FALSE)
plot(test.output.glm$LeadStatus,test.full.glm$LeadStatus)
abline(0,1)
# create dataframe that has all individual PANSS scores
combined.all = rbind(A_init_df, B_init_df, C_init_df, D_init_df)
combined.all = subset(combined.all,select = setdiff(names(combined.all),c("Country","Study","PatientID","RaterID","AssessmentiD","PANSS_Total","SiteID")))
names(combined.all)
combined.all = distinct(combined.all)
combined.all <- mutate_at(combined.all, vars(TxGroup,LeadStatus), as.factor)
# str(combined.all) # compactly display structure of the object
# fix up LeadStatus column for the purposes of part 4
combined.all$LeadStatus[combined.all$LeadStatus!="Passed"]<-"Flagged"
combined.all$LeadStatus = factor(combined.all$LeadStatus)
table(combined.all$LeadStatus) # how many passed vs. not
# split into training and dev set
set.seed(1)
tot = 1:dim(combined.all)[1] # total number of observations
train = sample(tot,length(tot)*0.7) # put 70% of observations into training set
combined.train.all = combined.all[train,]
head(combined.train.all) # visually check data frame
dev = tot[-train] # rest go into development set
combined.dev.all = combined.all[dev,]
# create test set that has all individual scores
E_df_tmp = subset(E_init_df,select = setdiff(names(E_init_df),c("Country","Study","PatientID","RaterID","PANSS_Total","SiteID")))
E_df_tmp = mutate_at(E_df_tmp,vars(TxGroup,AssessmentiD),as.factor)
test.all = E_df_tmp # study E is the test set
model1 <- glm(LeadStatus ~., family = "binomial", data = combined.train.all)
summary(model1)
library(broom)      # helps to tidy up model outputs
tidy(model1)
caret::varImp(model1)
library(MASS)       # provides LDA & QDA model functions
(lda.m1 = lda(LeadStatus~., data = combined.train[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")]))
plot(lda.m1)
dev.lda.pred = predict(lda.m1, newdata = combined.dev)
table(combined.dev$LeadStatus, dev.lda.pred$class) %>% prop.table() %>% round(3)
# accuracy rate
mean(dev.lda.pred$class == combined.dev$LeadStatus)
# error rate
mean(dev.lda.pred$class != combined.dev$LeadStatus)
# ROC curves
library(ROCR)
prediction(dev.lda.pred$posterior[,2], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(dev.lda.pred$posterior[,2], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(dev.lda.pred$posterior[,2], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
test=E_df
test.lda.pred = predict(lda.m1, newdata = test)
test$LeadStatus = test.lda.pred$posterior[,1]
test = test[,c("AssessmentiD","LeadStatus")]
# compare to logistic regression
plot(test.output.glm$LeadStatus,test$LeadStatus,xlim=c(0,0.5),ylim=c(0,0.5))
abline(0,1)
# write for kaggle prediction
write.csv(test,"Predictions/lda-prediction.csv",row.names=FALSE)
(lda.full = lda(LeadStatus~., data = combined_df[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")]))
plot(lda.full)
test=E_df
test.lda.pred = predict(lda.full, newdata = test)
test$LeadStatus = test.lda.pred$posterior[,1]
test = test[,c("AssessmentiD","LeadStatus")]
# compare to logistic regression
plot(test.output.glm$LeadStatus,test$LeadStatus,xlim=c(0,0.5),ylim=c(0,0.5))
abline(0,1)
# write for kaggle prediction
write.csv(test,"Predictions/lda-full-prediction.csv",row.names=FALSE)
(qda.m1 = qda(LeadStatus~., data = combined.train[,c("TxGroup","VisitDay","PANSS_Total","LeadStatus")]))
dev.qda.pred = predict(qda.m1, newdata = combined.dev)
table(combined.dev$LeadStatus, dev.qda.pred$class) %>% prop.table() %>% round(3)
# accuracy rate
mean(dev.qda.pred$class == combined.dev$LeadStatus)
# error rate
mean(dev.qda.pred$class != combined.dev$LeadStatus)
# ROC curves
library(ROCR)
prediction(dev.qda.pred$posterior[,2], combined.dev$LeadStatus) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# AUC
prediction(dev.qda.pred$posterior[,2], combined.dev$LeadStatus) %>%
performance(measure = "auc") %>%
.@y.values
# Cross-entropy
prediction(dev.qda.pred$posterior[,2], ifelse(combined.dev$LeadStatus=="Passed", 1, 0)) %>%
performance(measure = "mxe") %>%
.@y.values
test=E_df
test.qda.pred = predict(qda.m1, newdata = test)
test$LeadStatus = test.qda.pred$posterior[,1]
test = test[,c("AssessmentiD","LeadStatus")]
# compare to logistic regression
plot(test.output.glm$LeadStatus,test$LeadStatus,xlim=c(0,0.5),ylim=c(0,0.5))
abline(0,1)
# write for kaggle prediction
write.csv(test,"Predictions/qda-prediction.csv",row.names=FALSE)
#h2o.no_progress()
h2o.removeAll()
h2o.init(max_mem_size="6g")
Y.train = "LeadStatus"
X.train = setdiff(names(combined.train),c(Y.train,"Country"))
combined.train.h2o.gbm = as.h2o(combined.train)
combined.dev.h2o.gbm = as.h2o(combined.dev)
h2o.gbm.fit1 = h2o.gbm(x = X.train,y = Y.train,training_frame = combined.train.h2o.gbm, nfolds = 6)
h2o.gbm.fit1
#define function to easily plot ROC curve each time
getROC.h2o<-function(h2o.fit,dev.h2o.data){
pfm.gbm.dev = h2o.performance(h2o.fit,newdata = dev.h2o.data)
logloss.dev = h2o.logloss(pfm.gbm.dev)
auc.dev <- h2o.auc(pfm.gbm.dev)
fpr.dev <- h2o.fpr(pfm.gbm.dev) %>% .[['fpr']]
tpr.dev <- h2o.tpr(pfm.gbm.dev) %>% .[['tpr']]
data.frame(fpr = fpr.dev, tpr = tpr.dev) %>%
ggplot(aes(fpr, tpr) ) +
geom_line() +
ggtitle( sprintf('Development Dataset AUC, LogLoss: %f, %f', auc.dev,logloss.dev) )
}
#plot ROC curve
getROC.h2o(h2o.gbm.fit1,combined.dev.h2o.gbm)
h2o.gbm.fit2 = h2o.gbm(x=X.train,y=Y.train,training_frame=combined.train.h2o.gbm,nfolds=6,ntrees=1000,stopping_rounds=10,stopping_tolerance=0,seed=123)
h2o.gbm.fit2
getROC.h2o(h2o.gbm.fit2,combined.dev.h2o.gbm)
hyper_grid=list(
max_depth = c(3, 4, 5), # 2 < and < 6
min_rows = c(10, 20, 30, 40),
learn_rate = c(0.0025, 0.005, 0.01, 0.05), # > 0.001 and < 0.1
learn_rate_annealing = c(1), # 1 is best
sample_rate = c(.65, .7,0.75,.8,.85), # > 0.6 and < 0.9
col_sample_rate = c(0.6, 0.7,.8, .9) # > 0.6 and < 1
)
search_criteria=list(
strategy="RandomDiscrete",
stopping_metric="logloss",
stopping_tolerance=0.005,
stopping_rounds=10,
max_runtime_secs=60*1
)
grid = h2o.grid(
algorithm = "gbm",
grid_id = "gbm_random_discrete",
x = X.train,
y = Y.train,
training_frame = combined.train.h2o.gbm,
validation_frame = combined.dev.h2o.gbm,
hyper_params = hyper_grid,
search_criteria = search_criteria,
ntrees = 5000,
stopping_rounds = 10,
stopping_tolerance = 0,
seed = 123
)
grid_perf= h2o.getGrid(grid_id="gbm_random_discrete",sort_by="logloss",decreasing=FALSE)
best_model_id = grid_perf@model_ids[[1]]
best_model.random.discrete = h2o.getModel(best_model_id)
summary(grid_perf)
getROC.h2o(best_model.random.discrete,combined.dev.h2o.gbm)
# train final model
h2o.final <- h2o.gbm(
x = X.train,
y = Y.train,
training_frame = combined.train.h2o.gbm,
ntrees = 20000,
learn_rate = 0.01,
learn_rate_annealing = 1,
max_depth = 4,
min_rows = 30,
sample_rate = 0.75,
col_sample_rate = 0.9,
stopping_rounds = 10,
seed = 1
)
# model stopped after xx trees
h2o.final@parameters$ntrees
h2o.varimp_plot(h2o.final, num_of_features = 5)
# predict values with predict , make a function to use easily every time
getPredict = function(model.h2o,test_df,file.output){
test.h2o = test_df %>%
mutate_if(is.factor,factor,ordered = FALSE)%>%
as.h2o()
#str(test.h2o)
pred = h2o.predict(model.h2o,test.h2o) #error!!!
pred_df = as.data.frame(pred)
test_df$LeadStatus = pred_df$Flagged
test.output = test_df[,c("AssessmentiD","LeadStatus")]
write.csv(test.output,file.output,row.names = FALSE)
plot(test.output.glm$LeadStatus,test_df$LeadStatus,xlim = c(0,0.5),ylim = c(0,0.5))
abline(0,1)
}
test=E_df # study E is the test set
getPredict(best_model.random.discrete,test,"Predictions/test.gbm.csv")
Y.train = "LeadStatus"
X.train = setdiff(names(combined.train.all),c(Y.train,"Country")) # the predictors
combined.train.h2o.gbm = as.h2o(combined.train.all)
combined.dev.h2o.gbm = as.h2o(combined.dev.all)
hyper_grid=list(
max_depth = c(4, 5, 6), # > 4
min_rows = c(5, 10, 20, 30, 40), # > 5 and < 40
learn_rate = c(0.01, 0.05, 0.1), # >= 0.01 and < 0.1
learn_rate_annealing = c(1), # 1 is best
sample_rate = c(.8), # >= 0.75 and <= 0.8
col_sample_rate = c(0.8) # >= 0.7 and <= 0.8
)
search_criteria = list(
strategy = "RandomDiscrete",
stopping_metric = "logloss",
stopping_tolerance = 0.005,
stopping_rounds = 10,
max_runtime_secs = 60*1 # covers 36 models in 15 min
)
grid = h2o.grid(
algorithm = "gbm",
grid_id = "gbm_grid_all",
x = X.train,
y = Y.train,
training_frame = combined.train.h2o.gbm,
validation_frame = combined.dev.h2o.gbm,
hyper_params = hyper_grid,
search_criteria = search_criteria,
ntrees = 5000,
stopping_rounds = 10,
stopping_tolerance = 0,
seed = 123
)
grid_perf = h2o.getGrid(grid_id = "gbm_grid_all",sort_by = "logloss",decreasing = FALSE)
best_model_id = grid_perf@model_ids[[1]]
best_model = h2o.getModel(best_model_id)
summary(grid_perf)
getROC.h2o(best_model,combined.dev.h2o.gbm)
train.h2o <- as.h2o(combined.all)
# train final model with more trees and on full data
h2o.final <- h2o.gbm(
x = X.train,
y = Y.train,
training_frame = train.h2o,
ntrees = 10000,
learn_rate = 0.01,
learn_rate_annealing = 1,
max_depth = 6,
min_rows = 30,
sample_rate = 0.8,
col_sample_rate = 0.8,
stopping_rounds = 10,
seed = 1
)
# model stopped after xx trees
h2o.final@parameters$ntrees
h2o.varimp_plot(h2o.final)
getROC.h2o(h2o.final,combined.dev.h2o.gbm)
getPredict(h2o.final,test.all,"Predictions/test.gbm.all.csv")
#library(randomForest) # basic implementation
library(ranger)       # a faster implementation of randomForest
# for reproduciblity
set.seed(1)
# default RF model
m1 <- ranger(
formula = LeadStatus ~ .,
data    = combined.train.all,
probability = T
)
m1
# # number of trees with lowest MSE
# which.min(m1$err.rate)
#
# # MSE of this optimal random forest
# m1$err.rate[which.min(m1$err.rate)]
# prediction
pred_randomForest <- predict(m1, test.all)
plot(test.output.glm$LeadStatus,pred_randomForest$predictions[,1],xlim=c(0,.5),ylim=c(0,.5))
abline(0,1)
# start up h2o
h2o.removeAll()
h2o.init(max_mem_size = "6g")
set.seed(1)
# hypergrid
hyper_grid.h2o <- list(
ntrees      = seq(200, 500, by = 150),
mtries      = seq(15, 35, by = 10),
max_depth   = seq(20, 40, by = 5),
min_rows    = seq(1, 5, by = 2),
nbins       = seq(10, 30, by = 5),
sample_rate = c(.55, .632, .75)
)
# total number of combinations
nrow(hyper_grid.h2o)
# random grid search criteria
search_criteria <- list(
strategy = "RandomDiscrete",
stopping_metric = "logloss",
stopping_tolerance = 0.005,
stopping_rounds = 10,
max_runtime_secs = 60*1
)
# build grid search
random_grid <- h2o.grid(
algorithm = "randomForest",
grid_id = "rf_grid2",
x = X.train,
y = Y.train,
training_frame = combined.train.h2o.gbm,
hyper_params = hyper_grid.h2o,
search_criteria = search_criteria
)
# collect the results and sort by our model performance metric of choice
grid_perf2 <- h2o.getGrid(
grid_id = "rf_grid2",
sort_by = "logloss",
decreasing = FALSE
)
best_model_id = grid_perf@model_ids[[1]]
best_model = h2o.getModel(best_model_id)
